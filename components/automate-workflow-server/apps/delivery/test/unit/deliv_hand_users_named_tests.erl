-module(deliv_hand_users_named_tests).

-include_lib("hoax/include/hoax.hrl").
-include_lib("delivery/include/deliv_types.hrl").

-compile(export_all).

hoax_fixture_test_() ->
    hoax:fixture(?MODULE).

handle_when_method_is_put_uses_translate_input_function() ->
    EntName = <<"Ente">>,
    UserName = <<"duck">>,
    State = #handler{ent_name = EntName, user_name = <<"admin">>},
    hoax:mock(cowboy_req,
              ?expect(binding,
                      ?withArgs([user_name, req]),
                      ?andReturn({UserName, req1}))),
    hoax:mock(deliv_user,
              ?expect(fetch,
                      ?withArgs([EntName, UserName]),
                      ?andReturn({ok, user_record}))),
    hoax:mock(cowboy_req,
              ?expect(method,
                      ?withArgs([req1]),
                      ?andReturn({<<"PUT">>, req2}))),
    hoax:mock(deliv_web_utils,
              ?expect(parse_json_req,
                      ?withArgs([req2]),
                      ?andReturn({body, req3}))),
    hoax:mock(deliv_user_json,
              ?expect(validate_update,
                      ?withArgs([user_record, body]),
                      ?andReturn({proplist}))),
    hoax:mock(deliv_user,
              ?expect(getval,
                      ?withArgs([name, user_record]),
                      ?andReturn(UserName))),
    hoax:mock(deliv_user_json,
              ?expect(translate_input,
                      ?withArgs([user_record]),
                      ?andReturn(update_fun))),
    hoax:mock(deliv_web_utils,
              ?expect(translate_proplist,
                      ?withArgs([proplist, update_fun]),
                      ?andReturn({ok, updated_proplist}))),
    hoax:mock(deliv_user, [
              ?expect(setvals,
                      ?withArgs([updated_proplist, user_record]),
                      ?andReturn(updated_user_record)),
              ?expect(update,
                      ?withArgs([updated_user_record]),
                      ?andReturn({ok, updated_user_record}))]),

    Actual = deliv_hand_users_named:handle(req, State),
    ?assertEqual({true, req3, State}, Actual),
    ?verifyAll.

handle_when_method_is_put_and_user_name_change_of_logged_in_user_is_attempted_returns_error() ->
    EntName = <<"Ente">>,
    UserName = <<"duck">>,
    NewUserName = <<"canard">>,
    State = #handler{ent_name = EntName, user_name = UserName},
    hoax:mock(cowboy_req,
              ?expect(binding,
                      ?withArgs([user_name, req]),
                      ?andReturn({UserName, req1}))),
    hoax:mock(deliv_user,
              ?expect(fetch,
                      ?withArgs([EntName, UserName]),
                      ?andReturn({ok, user_record}))),
    hoax:mock(cowboy_req,
              ?expect(method,
                      ?withArgs([req1]),
                      ?andReturn({<<"PUT">>, req2}))),
    hoax:mock(deliv_web_utils,
              ?expect(parse_json_req,
                      ?withArgs([req2]),
                      ?andReturn({body, req3}))),
    hoax:mock(deliv_user_json,
              ?expect(validate_update,
                      ?withArgs([user_record, body]),
                      ?andReturn({proplist}))),
    hoax:mock(deliv_user,
              ?expect(getval,
                      ?withArgs([name, user_record]),
                      ?andReturn(UserName))),
    hoax:mock(ej,
              ?expect(get,
                      ?withArgs([[<<"name">>], {proplist}]),
                      ?andReturn(NewUserName))),
    hoax:mock(deliv_web_utils,
              ?expect(error_response,
                      ?withArgs([400, bad_request, <<"Cannot change name of logged in user.">>, req3, State]),
                      ?andReturn({true, req3, State}))),

    Actual = deliv_hand_users_named:handle(req, State),
    ?assertEqual({true, req3, State}, Actual),
    ?verifyAll.
